datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

// model ApiKey {
//     id  String @id @default(cuid())
//     key String @unique
//     aid String
//     uid String

//     expiresAt DateTime?
//     createdAt DateTime  @default(now())

//     app     App  @relation(fields: [aid], references: [id], onDelete: Cascade)
//     creator User @relation(fields: [uid], references: [id], onDelete: Cascade)

//     @@index([key])
// }

// model Team {
//     id          String  @id @default(cuid())
//     name        String
//     slug        String  @unique
//     description String?
//     picture     String?
//     website     String?
//     location    String?

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     memberships Membership[]
//     invitations Invitation[]

//     apps App[]
// }

// model App {
//     id          String  @id @default(cuid())
//     tid         String
//     name        String
//     description String?
//     picture     String?
//     website     String?

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     team Team @relation(fields: [tid], references: [id], onDelete: Cascade)

//     apiKeys ApiKey[]

//     @@unique([tid, name])
// }

// model Membership {
//     uid  String
//     tid  String
//     role Role

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     user User @relation(fields: [uid], references: [id])
//     team Team @relation(fields: [tid], references: [id])

//     @@id([uid, tid])
// }

// model Invitation {
//     id      String           @id @default(uuid())
//     uid     String
//     tid     String
//     role    Role
//     code    String
//     status  InvitationStatus @default(Pending)
//     created DateTime         @default(now())
//     expires DateTime

//     user User @relation(fields: [uid], references: [id])
//     team Team @relation(fields: [tid], references: [id])
// }

// enum Role {
//     Owner
//     Admin
//     Member
// }

// enum InvitationStatus {
//     Pending
//     Accepted
//     Revoked
// }
