datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    memberships Membership[]
    invitations Invitation[]
    appTokens   AppToken[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Team {
    id          String  @id @default(cuid())
    name        String
    slug        String  @unique
    description String?
    picture     String?
    website     String?
    location    String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    memberships Membership[]
    invitations Invitation[]

    apps App[]
}

model Membership {
    uid  String
    tid  String
    role Role

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [uid], references: [id])
    team Team @relation(fields: [tid], references: [id])

    @@id([uid, tid])
}

model Invitation {
    id      String           @id @default(uuid())
    uid     String
    tid     String
    role    Role
    code    String
    status  InvitationStatus @default(Pending)
    created DateTime         @default(now())
    expires DateTime

    user User @relation(fields: [uid], references: [id])
    team Team @relation(fields: [tid], references: [id])
}

enum Role {
    Owner
    Admin
    Member
}

enum InvitationStatus {
    Pending
    Accepted
    Revoked
}

model App {
    id          String  @id @default(cuid())
    tid         String
    name        String
    description String?
    picture     String?
    website     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    team Team @relation(fields: [tid], references: [id], onDelete: Cascade)

    tokens     AppToken[]
    impression Impression[]

    @@unique([tid, name])
}

model AppToken {
    id    String @id @default(cuid())
    token String @unique
    aid   String
    uid   String

    expiresAt DateTime?
    createdAt DateTime  @default(now())

    app     App  @relation(fields: [aid], references: [id], onDelete: Cascade)
    creator User @relation(fields: [uid], references: [id], onDelete: Cascade)

    @@index([token])
}

model Impression {
    id      String  @id @default(cuid())
    aid     String
    url     String?
    email   String?
    note    String
    emotion String?
    label   String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    app App @relation(fields: [aid], references: [id], onDelete: Cascade)
}
