datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    memberships Membership[]
    invitations Invitation[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Team {
  id          String  @id
  name        String  @unique
  description String
  phone       String
  picture     String?
  website     String?
  location    String

  memberships Membership[]
  invitations Invitation[]
}

model Membership {
  uid  String
  tid  String
  role Role

  user User @relation(fields: [uid], references: [id])
  team Team @relation(fields: [tid], references: [id])

  @@id([uid, tid])
}

model Invitation {
  id      String           @id @default(uuid())
  uid     String
  tid     String
  role    Role
  code    String
  status  InvitationStatus @default(Pending)
  created DateTime         @default(now())
  expires DateTime

  user User @relation(fields: [uid], references: [id])
  team Team @relation(fields: [tid], references: [id])
}

enum Role {
  Owner
  Admin
  Member
}

enum InvitationStatus {
  Pending
  Accepted
  Revoked
}